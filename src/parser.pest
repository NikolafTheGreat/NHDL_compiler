WHITESPACE = _{
    " "|"\t"|"\r"|"\n"
}
COMMENT = _{
    ("/*" ~ (!"*/" ~ ANY)* ~ "*/") |
    ("//" ~ (!"\n" ~ ANY)* ~ "\n") 
}

Top = _{
    SOI ~
    OuterScope ~
    EOI
}

OuterScope = {
    "top" ~ ":" ~ Identifier ~ ";" ~
    Definition*
}

Definition = _{
    ModuleDeclaration|EnumDeclaration|ConstantDeclaration
}

Declaration = _{
    RegisterInstanciation|WireInstanciation
}

RegisterInstanciation = {
    "reg" ~ Identifier ~
    "{" ~ "clock" ~ ":" ~ Expression ~
    "," ~ "reset" ~ ":" ~ Expression ~ 
    "," ~ "initial" ~ ":" ~ Expression ~ ","? ~
    "}" ~ ":" ~ Type ~ ";"
}

WireInstanciation = {
    "wire" ~ Identifier ~ ":" ~ Type ~ ";"
}

//Statements
Statement = _{
    Scope|Connection|If|Switch
}

Scope = {
    "{" ~ (Definition|Loop|Declaration|Statement)* ~ "}"
}

ModuleDeclaration = {
    "module" ~ Identifier ~ GenericConstant? ~ TypeBundle ~ Statement
}

GenericConstant = {
    "<" ~ (Identifier ~ ",")* ~ Identifier? ~ ">"
}

EnumDeclaration = {
    "enum" ~ Identifier ~ "{" ~ 
        (Identifier ~ "::" ~ ",")* ~ Identifier? ~
    "}"
}

ConstantDeclaration = {
    "const" ~ Identifier ~ ":" ~ Type ~ "=" ~ Expression ~ ";"
}

Connection = _{
    StrongConnection | WeakConnection
}

StrongConnection = {
    Target ~ "<=" ~ Expression ~ ";"
}

WeakConnection = {
    Target ~ "<-" ~ Expression ~ ";"
}

If = {
    "if" ~ "(" ~ Expression ~ ")" ~ Statement ~ ("else" ~ Statement)?
}

Switch = {
    SwitchNumber | SwitchEnum
}

SwitchNumber = _{
    "switch" ~ "(" ~ Expression ~ ")" ~ "{" ~
    (Number ~ ":" ~ Statement ~ ",")* ~
    (
        (Number ~ ":" ~ Statement)|
        (Empty ~ ":" ~ Statement)|
        (Empty ~ ":" ~ Statement ~ ",")
    )? ~

    "}"
}

SwitchEnum = _{
    "switch" ~ "(" ~ Expression ~ ")" ~ "{" ~
    (EnumVariant ~ ":" ~ Statement ~ ",")* ~
    (
        (EnumVariant ~ ":" ~ Statement)|
        (Empty ~ ":" ~ Statement)|
        (Empty ~ ":" ~ Statement ~ ",")
    )? ~

    "}"
}

Empty = {
    "_"
}

Loop = {
    "loop"~ "(" ~ Identifier ~ ":" ~ Expression ~ ".." ~ Expression ~ ")" ~ Statement 
}

//Identifiers
Identifier = @{
    (LETTER|"_") ~ (LETTER|NUMBER|"_")*
}

Target = {
    Identifier ~ ("[" ~ Expression ~ "]")? ~ ("." ~ Identifier ~ ("[" ~ Expression ~ "]")?)*
}

Number = ${
    ("s"|"u") ~ (HexNumber | OctNumber | BinNumber | DecNumber) ~ ("[" ~ Expression ~ "]")?
}

HexNumber = @{
    "x" ~ "-"? ~ ASCII_HEX_DIGIT+
}

OctNumber = @{
    "o" ~ "-"? ~ ASCII_OCT_DIGIT+
}

BinNumber = @{
    "b" ~ "-"? ~ ASCII_BIN_DIGIT+
}

DecNumber = @{
    ASCII_DIGIT+
}

EnumVariant = ${
    Identifier ~ "::" ~ Identifier
}

//Types
Type = _{
    Vector |
    Signed |
    Unsigned |
    Clock |
    Reset |
    TypeBundle |
    Custom
}

Vector = {
    "[" ~ Type ~ ":" ~ Number ~ "]"
}

Unsigned = ${
    "u[" ~ Expression ~ "]"
}

Signed = ${
    "s[" ~ Expression ~ "]"
}

Clock = {
    "clock"
}

Reset = _{
    SyncReset | AsyncReset
}
SyncReset = {
    "reset"
}
AsyncReset = {
    "async_reset"
}

TypeBundle = {
    "(" ~ (Flip? ~ Identifier ~ ":" ~ Type ~ ",")* ~ (Flip? ~ Identifier ~ ":" ~ Type)? ~ ")"
}

Flip = {
    "flip"
}

Custom = {
    Identifier ~ ("<" ~ Target+ ~ ">")
}

//Expressions
Expression = {
    Comparison
}

Comparison = {
    Concatination ~ (ComparisonOperation ~ Concatination)*
}
ComparisonOperation = {
    "<"|">"|"<=" |">="|"=="|"!="
}

Concatination = {
    Logical ~ (ConcatinationOperation ~ Logical)*
}
ConcatinationOperation = {
    "|"
}

Logical = {
    Shift ~ (LogicalOperation ~ Shift)*
}
LogicalOperation = {
    "and"|"or"|"xor"
}

Shift = {
    Sum ~ (ShiftOperation ~ Sum)*
}
ShiftOperation = {
    "<<"|">>"
}

Sum = {
    Term ~ (SumOperation ~ Term)*
}
SumOperation = {
    "+"|"-"
}

Term = {
    Unary ~ (TermOperation ~ Unary)*
}
TermOperation = {
    "*"|"/"|"%"
}

Unary = {
    UnaryOperation* ~ Atom
}
UnaryOperation = {
    "!"|"-"
}

Atom = _{
    "(" ~ Expression ~ ")"|
    Function|
    Number|
    EnumVariant|
    Target|
    ExpressionBundle
}

ExpressionBundle = {
    "(" ~ (Flip? ~ Identifier ~ ":" ~ Expression ~ ",")* ~ (Flip? ~ Identifier ~ ":" ~ Expression)? ~ ")"
}

Function = {
    (BuiltInFunction) ~ "(" ~ (Expression ~ ",")* ~ Expression? ~ ")"
}

BuiltInFunction = {
    "add"|"sub"|
    "mul"|"div"|"rem"|
    "lt"|"gt"|"leq"|"geq"|"eq"|"neq"|
    "pad"|
    "asUnsigned"|"asSigned"|"asClock"|"asReset"|"asAsyncReset"|
    "shl"|"shr"|"dshl"|"dshr"|
    "asSignedArithmatic"|
    "neg"|
    "not"|"and"|"or"|"xor"|
    "reduce_and"|"reduce_or"|"reduce_xor"|
    "cat"|"bits"|
    "head"|"tail"|
    "mux"
}